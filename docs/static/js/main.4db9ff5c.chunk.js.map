{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6KAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,6BCJDQ,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OAEQ,uBAAMC,SATO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IAC5BR,GAAc,SAAAS,GAAG,OAAGP,GAAH,mBAAiBO,OAClCN,EAAc,MAKV,UACA,6BAAKD,IACL,uBAAOQ,KAAK,OAAOC,MAAOT,EAAYU,SAdrB,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,cAmB/BZ,EAAYe,UAAY,CACpBd,cAAee,YAAUC,KAAKC,Y,mCC3BnBC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAAUH,GADpF,8BAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QARpB,kBAWdM,GAXc,4CAAH,sDCETO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAQrB,ECVwB,SAACA,GAEzB,MAA0BlB,mBAAU,CAChCyB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNxB,EAAQC,GAAU1B,MAAM,SAAAkD,GACxBC,YAAW,WACPH,EAAS,CAACf,KAAKiB,EAAKJ,SAAQ,MAC9B,UAEJ,CAACpB,IAGIqB,EDNgBK,CAAa1B,GAA7BO,EAAP,EAAOA,KAAKa,EAAZ,EAAYA,QAIZ,OAAQ,eAAC,WAAD,WACJ,6BAAKpB,IACJoB,GAAS,wCACV,qBAAKJ,UAAU,YAAf,SAGQT,EAAKE,KAAI,SAAAC,GACL,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEOlCgB,EA1BM,WAQnB,MAAoC7C,mBAAS,CAAC,eAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAGC,OAAO,eAAC,WAAD,WACN,8CACA,uBACD,cAAC,EAAD,CAAaA,cAAeA,IAC3B,6BAEI+C,EAAWnB,KAAI,SAAAT,GACX,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCjBjC6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B9D,M","file":"static/js/main.4db9ff5c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\nimport { PropTypes } from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setinputValue] = useState('')\n    const handleInputChange= (e)=>{\n        setinputValue(e.target.value);\n    } \n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        if(inputValue.trim().length>2){\n        setCategories(cat=>[inputValue,...cat]);\n        setinputValue('');\n        }\n    }\n    return (\n       \n            <form onSubmit={handleSubmit}>\n            <h1>{inputValue}</h1>\n            <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\n            </form>\n       \n    )\n}\n\nAddCategory.prototype = {\n    setCategories: PropTypes.func.isRequired\n}\n","export   const getGifs = async(category)  => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=gaj3d66lHQpxk0Nd7bDOiCeDTDMtR5SF&q=${encodeURI(category)}&limit=10&lang=es`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map(img=>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n  \n    return (\n        <div className='card'>\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React, { Fragment, useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    // const [images, setimages] = useState([]);\n\n    // useEffect(()=>{\n    //     getGifs(category).then(setimages)\n    // },[category])\n\n    const {data,loading} = useFetchGifs(category);\n\n \n\n    return (<Fragment>\n        <h3>{category}</h3>\n        {loading&&<p>Loading</p>}\n        <div className='card-grid'>\n   \n         {\n                data.map(img => {\n                    return <GifGridItem key={img.id} {...img}/>\n                })}\n         \n        </div>\n        </Fragment>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setstate] = useState(({\n        data:[],\n        loading:true\n    }));\n\n    useEffect(()=>{\n        getGifs(category).then( imgs => {\n        setTimeout(()=>{\n            setstate({data:imgs,loading:false})\n        },3000)\n        })\n    },[category])\n\n \n    return state;\n}\n","import { Fragment, useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\n\nconst GifExpertApp = ()=>{\n\n    // const categories = ['One punch man','DragonBall','Pokemon']\n    //    const handleAdd = () => {\n    //        //se puede cambiar el orden\n    //        setcategories([...categories,'Pedro'])\n    //    }\n\n  const [categories, setCategories] = useState(['DragonBall']);\n\n\n   return <Fragment>\n    <h2>GifExpertApp</h2>\n    <hr/>\n   <AddCategory setCategories={setCategories}/>\n    <ol>\n    {\n        categories.map(category=>{\n            return <GifGrid key={category} category={category}/>\n        })\n    \n    }\n    </ol>\n  \n   </Fragment>\n}\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}